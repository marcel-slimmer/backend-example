on:
  push:
    branches:
      - develop
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop
      - main
jobs:
  run_tests:
    name: Run tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: install dependencies
        run: pip install --upgrade setuptools && pip install -r requirements.txt
      - name: Run tests
        run: python -m unittest
      - name: Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build_and_deploy:
    name: Build and deploy to ECS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
    - name: Print GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
#    - name: Configure aws credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.BASELINE_USER_ACCESS_KEY }}
#        aws-secret-access-key: ${{ secrets.BASELINE_USER_SECRET_KEY }}
#        aws-region: eu-west-1
#    - name: Login to AWS ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#    - name: Build and push image to AWS ECR
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPO_NAME: ${{ secrets.ECR_REPO_NAME }}
#        IMAGE_TAG: latest
#      run: |
#        docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
#    - name: Download task definition
#      run: |
#        aws ecs describe-task-definition --task-definition fargate-task-definition --query taskDefinition > task-definition.json
#    - name: Fill in the new image ID in the Amazon ECS task definition
#      id: task-def
#      uses: aws-actions/amazon-ecs-render-task-definition@v1
#      with:
#        task-definition: task-definition.json
#        container-name: backend-app
#        image: ${{ secrets.ECR_REPO_URL }}:latest
#    - name: Deploy Amazon ECS task definition
#      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      with:
#        task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: backend
#        cluster: ${{ secrets.ECS_CLUSTER_NAME }}
#        wait-for-service-stability: false
